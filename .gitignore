# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
pip-wheel-metadata/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
.python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# PEP 582; used by e.g. github.com/David-OConnor/pyflow
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/









CODE

from fastapi import FastAPI
import ssl
import uvicorn
from cryptography import x509
from pydantic import BaseModel

class URL(BaseModel):
    Url:str

app = FastAPI()

@app.post("/certificate")
def certificate(data:URL):

    try:
        cert = ssl.get_server_certificate((data.Url, 443))
        certDecoded = x509.load_pem_x509_certificate(str.encode(cert))

        extension_list = []
        for line in certDecoded.extensions._extensions:
            value = line.value.dict
            for raw in line.value.dict.values():
                if str(raw)[:2] == "b'" or str(raw)[:2] == 'b"':
                    value = ""
                if "<builtins" in str(raw):
                    value = ""
            extension = {
                line._oid._name : line._oid.dotted_string,
                'critical' : line._critical,
                'value' : value
                }
            extension_list.append(extension)

        result = {
        'issuer' : str(certDecoded.issuer)[6:-2],
        'subject' : str(certDecoded.subject)[6:-2],
        'after' : certDecoded.not_valid_after,
        'before' : certDecoded.not_valid_before,
        'extensions': extension_list,
        'seri_no' : certDecoded.serial_number,
        'version' : certDecoded.version.value
        }
        print(result)

    except Exception as e:
        print(data.Url, ":", e)
        return {"Status": "Error", "Message":f"{e}" ,"Content": ""}

    return {"Status": "Success", "Message":"" ,"Content": result}

    certificate

if __name__ == "main":
    uvicorn.run(app, host="0.0.0.0", port=52890)














